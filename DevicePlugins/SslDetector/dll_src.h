//---------------------------------------------------------------------------

#ifndef dll_srcH
    #define dll_srcH
//---------------------------------------------------------------------------

const char Version_of_dll[] = "6.0.40.47";
typedef enum {RUN,TEST}MODE;
typedef enum {_19MC, _38MC,_3MC,_53MC}TIMEPERSTRING;
typedef enum{NOERROR_DLL = 0, REG_ERROR_DLL = 0x01,TEST_ERROR_DLL = 0x02,RDUC_ERROR_DLL = 0x04,ADAPTER_ERROR_DLL = 0x08, TIFF_ERROR_DLL = 0x010,UDP_ERROR_DLL = 0x020}_ERROR_OFF_DLL;

#define _MAX_S_FILTER 31

//Инициализация - вызывается во время инициализации прогр. Если параметр dir_ini раве NULL
//dll назначает свой путь к файлам ini
// dir - рабочая директория
// dir_ini директория ini файлов (Linux)
// dir_ini директортя ini файлов или NULL (Windows)
//После вызова функции, ф ункция DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" void  DLL_EI    Init(const char* dir, const char*dir_ini); 


//Перевод в рабочий / тестовый режим 
//После вызова функции, функция DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" DLL_EI void     p_dll_SetModeRun(MODE mode);

//Получение информ. из датчика: **pt - указатель на указатель буфера
//						  ln - длина требуемых данных в байтах
//						   disable_set_binning - запрет вывода данных с бинингом(для СРК = 0, 
//							для других приборов - 1)
// возвращает количество принятых байт или 0 если была ошибка
// при наличии лшибок, последующий вызов p_dll_GetError(char** ) может идентифицировать ошибку
extern "C" DLL_EI unsigned long   GetBufer(BYTE **pt, unsigned long ln, bool disable_set_binning);


//Вызывается при закрытии
extern "C" DLL_EI void     p_dll_Close();

//Возвращает строку с указаникм версии dll, прошивки альтеры и PIC для ФМС,
// для СРК возвращает версию dll, версию прошивок альтер - мат. платы и трех аналоговых плат
extern "C" DLL_EI char*    p_dll_GetVersionDll();

//Возвращает количество PIX в строке, этим однозначно определяется назначение датчика - ФМС или СРК 
// для ФМС - 2048, 2304
// для СРК - 1152, 576
extern "C" DLL_EI WORD     p_dll_GetPixelPerString();

//Возвращает установленый коэффициент усиления матриц
extern "C" DLL_EI BYTE     p_dll_GetMtrGane();

//Устанавливает внутренний ЦАП датчика в режиме тестирования (0 - 8)
//После вызова функции, вызов функции DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" DLL_EI void     p_dll_SetDac(WORD i);

//Устанавливает коэффициент усиления матриц в качесте входного параметра принимает коэффициента усиления
//в соответствии  с типом матрици см. PDF на матрицы (в двоичном коде)
//ПОСЛЕ ВЫЗОВА ЭТОЙ Ф. ДЛОЛЖНА БЫТЬ ВЫПОЛНЕНА ЗАДЕРЖКА 1,5 сек перед выполнением следующих действий с датчиком. 
//Вызов этой ф. производится датчиком при выполнении AfteInitOnCreate(), и основной программой этот вызов должен выполняться
//только при ИЗМЕНЕНИИ коеффициента усиления матриц датчика.
//После вызова функции, вызов функции DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" DLL_EI void     p_dll_PutGaneMtr(BYTE gane);

//Разрешает работу внутреннего аппаратного фильтра датчика(только СРК)
// аргумент w = '0' - фильтр запрещен, w = '1' - работа фильтра разрешена
//После вызова функции, вызов функции DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" DLL_EI void     p_dll_SetFilter(char w);

//Обязательно вызывается после инициализации
//После вызова функции, вызов  DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" DLL_EI bool     AfteInitOnCreate();

//Установка биннинга для СРК, аргумент - (для 1152 - 1,2), (для 576 - 1,2,3,4)
//После вызова функции, вызов  DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" DLL_EI void     p_dll_SendBinning(WORD w);

//Возвращает счетчик ошибки контрольной суммы при передаче(только для ФМС - 2048pix)
//счетчик ошибок сбрасывается только инициализацией датчика
extern "C" DLL_EI DWORD    p_dll_GetChError();

//Для СРК - установка времени накопления
//После вызова функции, вызов  DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" DLL_EI void     p_dll_PutTimePerString(TIMEPERSTRING b);

//Установка программного фильтра на данные датчика, используемые для сведения
//аргумент - аппертура медианного фильтра 0x0 - 0x1f
//После вызова функции, вызов  DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" DLL_EI void     p_dll_SetSFilter(int v);

//Посылает пакет 5 раз , если ответ не пришел возвращает 0, ответ пришел - 1
//После вызова функции, вызов  DWORD p_dll_GetError(char**) - покажет наличие ошибок
extern "C" DLL_EI bool     p_dll_SendIcmp();

//Если в любой из dll была ошибка - возвращается _ERROR_OFF_DLL
// если 0 -ошибок не было
//аргумент указатель на указатель текстовой строки об ошибке.
//Строка разделителем \r\n разделена на три части: dll, функция, сообщение
extern "C" DLL_EI DWORD    p_dll_GetError(char**str);

/*
Порядок вызова 
1. Init(NULL);
2  AfteInitOnCreate()
3  p_dll_GetVersionDll(если необходимо)
4  p_dll_PutGaneMtr(gane)  //аргумент - код коэффициент усиления матриц
5  p_dll_SetModeRun(mode)  //режим работы (рабочий/тестовый) 
6  Остальные функции могут вызываться в любой комбинации (после вызовов 1 - 5) 
*/
#endif
